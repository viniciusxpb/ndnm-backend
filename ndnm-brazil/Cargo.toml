# ndnm-brazil/Cargo.toml
[package]
name = "ndnm-brazil"
version = "0.1.0"
edition = "2021"
default-run = "ndnm-brazil"

[dependencies]
# Nossa caixa de ferramentas base
ndnm-core = { path = "../ndnm-core" }

# O trio elétrico do async Rust
tokio = { version = "1", features = ["full"] }
futures-util = { version = "0.3", features = ["sink"] } # Necessário para WebSockets

# O framework web que a gente ama
axum = { version = "0.7", features = ["ws"] } # Habilitamos a feature "ws" para WebSockets

# Serialização/Deserialização de JSON
serde = { version = "1", features = ["derive"] }
serde_json = "1"

# Linha de comando (mesmo padrão)
clap = { version = "4.5", features = ["derive"] }

# --- NOSSA NOVA BRUXARIA DE LOG ---
# Crate pra lidar com datas e horas (vamos usar UTC)
chrono = { version = "0.4", features = ["serde"] } # "serde" pra manter o padrão

# A magia dos WebSockets com Tokio
tokio-tungstenite = "0.23"

# Para fazer chamadas HTTP para os outros nodes
reqwest = { version = "0.12", features = ["json"] } # Usaremos reqwest para chamadas HTTP

# Para lidar com grafos (vamos precisar!)
# Adicionaremos depois quando formos parsear o fluxo

[dev-dependencies]
# Para futuros testes
axum = "0.7"
tower = { version = "0.4", features = ["util"] }